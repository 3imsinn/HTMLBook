<?xml version="1.0" encoding="UTF-8"?>

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
               xmlns:functx="http://www.functx.com"
	       xmlns="http://www.w3.org/1999/xhtml"
	       xmlns:dc="http://purl.org/dc/elements/1.1/"
	       xmlns:ncx="http://www.daisy.org/z3986/2005/ncx/"
	       xmlns:dcterms="http://purl.org/dc/terms/"
	       xmlns:opf="http://www.idpf.org/2007/opf"
	       xmlns:h="http://www.w3.org/1999/xhtml"
	       xmlns:e="http://github.com/oreillymedia/epubrenderer"
               stylesheet="../epub.xsl">

  <!-- Test suite for opf.xsl -->

  <!-- Global params for testing -->
  <x:param name="metadata.unique-identifier.id" select="'pub-identifier'"/>
  <x:param name="metadata.ibooks-specified-fonts" select="1"/>
  <x:param name="generate.cover.html" select="1"/>

  <x:param name="package.namespaces">
    <opf.foo/>
    <dc:foo/>
    <dcterms:foo/>
  </x:param>

  <x:param name="ncx.toc.id" select="'tocncx'"/>
  <x:param name="ncx.toc.filename" select="'toc.ncx'"/>
  <x:param name="css.id" select="'bookcss'"/>
  <x:param name="epub.cover.html.id" select="'bookcover'"/>
  <x:param name="cover.html.filename" select="'cover.html'"/>
  <x:param name="root.chunk.filename" select="'index.html'"/>
  <x:param name="epub.cover.image.id" select="'bookcoverimage'"/>

  <x:param name="embedded.fonts.list">DejaVuSerif.otf
DejaVuSans-Bold.otf
UbuntuMono-Regular.otf
UbuntuMono-Bold.otf
UbuntuMono-BoldItalic.otf
UbuntuMono-Italic.otf</x:param>
  
  <x:scenario label="When get.fonts.xml is run">
    <x:call template="get.fonts.xml">
      <x:param name="fonts.to.process">DejaVuSerif.otf
DejaVuSerif.ttf
UbuntuMono-Regular.otf
</x:param>
    </x:call>
    <x:expect label="it should return an XML-formatted lists of fonts with proper mimetypes">
      <e:fonts>
	<e:font filename="DejaVuSerif.otf" mimetype="application/vnd.ms-opentype"/>
	<e:font filename="DejaVuSerif.ttf" mimetype="font/truetype"/>
	<e:font filename="UbuntuMono-Regular.otf" mimetype="application/vnd.ms-opentype"/>
      </e:fonts>
    </x:expect>
  </x:scenario>

  <x:scenario label="When generate.opf is run">
    <x:call template="generate.opf.content"/>
    <x:scenario label="with generate.guide disabled">
      <x:call>
	<x:param name="generate.guide" select="0"/>
      </x:call>
      <x:expect test="not(exists(/opf:package/opf:guide))"/>
    </x:scenario>
    <x:expect label="A package root element should be generated with the proper namespaces">
      <package xmlns="http://www.idpf.org/2007/opf" 
	       xmlns:opf="http://www.idpf.org/2007/opf"
	       xmlns:dc="http://purl.org/dc/elements/1.1/"
	       xmlns:dcterms="http://purl.org/dc/terms/"
	       version="3.0"
	       prefix="ibooks: http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0/"
	       unique-identifier="pub-identifier">...</package>
    </x:expect>
    <x:expect label="The OPF package should contain a metadata element" test="exists(/opf:package/opf:metadata)"/>
    <x:expect label="The OPF package should contain a manifest element" test="exists(/opf:package/opf:manifest)"/>
    <x:expect label="The OPF package should contain a spine element" test="exists(/opf:package/opf:spine)"/>
    <x:expect label="The OPF package should contain a guide element by default" test="exists(/opf:package/opf:guide)"/>
  </x:scenario>

  <x:scenario label="When opf.manifest is run">
    <x:call template="opf.manifest"/>
    <!-- Based on font list specified in global param $embedded.fonts.list -->
    <x:expect label="there should be items for each font" test="exists(/opf:manifest/opf:item[@href='DejaVuSerif.otf']) and
								exists(/opf:manifest/opf:item[@href='DejaVuSans-Bold.otf']) and
								exists(/opf:manifest/opf:item[@href='UbuntuMono-Regular.otf']) and
								exists(/opf:manifest/opf:item[@href='UbuntuMono-Bold.otf']) and
								exists(/opf:manifest/opf:item[@href='UbuntuMono-BoldItalic.otf']) and
								exists(/opf:manifest/opf:item[@href='UbuntuMono-Italic.otf'])"/>
    <x:scenario label="with NCX generation enabled">
      <x:call>
	<x:param name="generate.ncx.toc" select="1"/>
      </x:call>
      <x:expect label="there should be a manifest item for the NCX TOC" test="exists(/opf:manifest/opf:item[@id = 'tocncx' and 
									      @href = 'toc.ncx' and 
									      @media-type= 'application/x-dtbncx+xml'])"/>
    </x:scenario>
    <x:scenario label="with NCX generation disabled">
      <x:call>
	<x:param name="generate.ncx.toc" select="0"/>
      </x:call>
      <x:expect label="there *should not* be a manifest item for the NCX TOC" test="not(exists(/opf:manifest/opf:item[@id = 'tocncx']))"/>
    </x:scenario>

    <x:scenario label="with CSS provided">
      <x:call>
	<x:param name="css.filename" select="'core.css'"/>
      </x:call>
      <x:expect label="there should be a manifest item for the CSS" test="exists(/opf:manifest/opf:item[@id = 'bookcss' and
									  @href = 'core.css' and
									  @media-type= 'text/css'])"/>
    </x:scenario>
    <x:scenario label="with no CSS provided">
      <x:call>
	<x:param name="css.filename" select="''"/>
      </x:call>
      <x:expect label="there *should not* be a manifest item for the CSS" test="not(exists(/opf:manifest/opf:item[@id = 'bookcss']))"/>
    </x:scenario>

    <x:scenario label="with cover HTML file enabled">
      <x:call>
	<x:param name="generate.cover.html" select="1"/>
      </x:call>
      <x:expect label="there should be a manifest item for the cover" test="exists(/opf:manifest/opf:item[@id = 'bookcover' and
									  @href = 'cover.html' and
									  @media-type= 'application/xhtml+xml'])"/>
    </x:scenario>
    <x:scenario label="with cover HTML file disabled">
      <x:call>
	<x:param name="generate.cover.html" select="0"/>
      </x:call>
      <x:expect label="there *should not* be a manifest item for the cover" test="not(exists(/opf:manifest/opf:item[@id = 'bookcover']))"/>
    </x:scenario>

    <x:scenario label="with root chunk generation enabled">
      <x:call>
	<x:param name="generate.root.chunk" select="1"/>
      </x:call>
      <x:expect label="there should be a manifest item for the root chunk" test="exists(/opf:manifest/opf:item[@href = 'index.html' and
										 @media-type= 'application/xhtml+xml'])"/>
    </x:scenario>

    <x:scenario label="with root chunk generation disabled">
      <x:call>
	<x:param name="generate.root.chunk" select="0"/>
      </x:call>
      <x:expect label="there *should not* be a manifest item for the root chunk" test="not(exists(/opf:manifest/opf:item[@href = 'index.html']))"/>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When manifest-images is called">
    <x:call template="manifest-images">
      <x:param name="img-nodes">
	<img src="puppy.jpg"/>
	<img src="kitty.png"/>
	<img src="birdie.gif"/>
	<img src="puppy.jpg"/>
      </x:param>
    </x:call>
    <x:expect label="there should be an item for each img src in the source files"
	      test="every $image in ('puppy.jpg', 'kitty.png', 'birdie.gif')
		    satisfies (exists(//opf:item[@href=$image]))"/>
    <x:expect label="image items should have the correct mimetype" test="(every $image in (//opf:item[substring-after(@href, '.') = 'gif']) 
									 satisfies ($image[@media-type = 'image/gif'])) and
									 (every $image in (//opf:item[substring-after(@href, '.') = 'jpg']) 
									 satisfies ($image[@media-type = 'image/jpeg'])) and
									 (every $image in (//opf:item[substring-after(@href, '.') = 'png']) 
									 satisfies ($image[@media-type = 'image/png']))"/>
    <x:expect label="and there should be only one item that references each image file" test="not(exists(//@href[(. = preceding::opf:item/@href) or (. = following::opf:item/@href)]))"/> 
    <x:scenario label="on a cover image">
      <x:call>
	<!-- Test XSL is output to a subdir of the .xspec dir, which also contains skeleton, so relative path contains .. to go up a directory level -->
	<x:param name="img-nodes" select="document('../skeleton.html')//h:figure[@data-type='cover']//h:img"/>
      </x:call>
      <x:expect label="the item should have the proper cover-image id and cover-image property set">
	<opf:item id="bookcoverimage" href="..." media-type="..." properties="cover-image"/>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When manifest-html is called (no embedded MathML or SVG in chunks)">
    <x:call template="manifest-html">
      <x:param name="chunk.nodes">
	<section data-type="chapter">
	  <h1>Chapter Title</h1>
	  <p>Chapter text</p>
	</section>
	<section data-type="sect1">
	  <h1>Sect1 Title</h1>
	  <p>Sect1 text</p>
	</section>
	<section data-type="appendix">
	  <h1>Appendix Title</h1>
	  <p>Appendix text</p>
	</section>
      </x:param>
    </x:call>
    <x:expect label="there should be an item for each chunk node in the source files with an id, href, and the proper media-type"
	      test="count(//opf:item[@href and @id and @media-type='application/xhtml+xml']) = 3"/>
    <x:expect label="there should be no special properties" test="count(//opf:item[@properties]) = 0"/>
  </x:scenario>

  <x:scenario label="When manifest-html is called for a chunk node that contains MathML">
    <x:call template="manifest-html">
      <x:param name="chunk.nodes">
	<section data-type="chapter">
	  <h1>Chapter Title</h1>
	  <p>Chapter text</p>
	  <p>Here's some MathML:</p>
	  <math xmlns="http://www.w3.org/1998/Math/MathML"/>
	</section>
      </x:param>
    </x:call>
    <x:expect label="MathML should be present in the item properties"
	      test="exists(//opf:item[contains(@properties, 'math')])"/>
  </x:scenario>

  <x:scenario label="When manifest-html is called for a chunk node that contains SVG">
    <x:call template="manifest-html">
      <x:param name="chunk.nodes">
	<section data-type="chapter">
	  <h1>Chapter Title</h1>
	  <p>Chapter text</p>
	  <p>Here's some SVG:</p>
	  <svg xmlns="http://www.w3.org/2000/svg"/>
	</section>
      </x:param>
    </x:call>
    <x:expect label="SVG should be present in the item properties"
	      test="exists(//opf:item[contains(@properties, 'svg')])"/>
  </x:scenario>

  <x:scenario label="When manifest-html is called for a chunk node that contains MathML *and* SVG">
    <x:call template="manifest-html">
      <x:param name="chunk.nodes">
	<section data-type="chapter">
	  <h1>Chapter Title</h1>
	  <p>Chapter text</p>
	  <p>Here's some MathML:</p>
	  <math xmlns="http://www.w3.org/1998/Math/MathML"/>
	  <p>Here's some SVG:</p>
	  <svg xmlns="http://www.w3.org/2000/svg"/>
	</section>
      </x:param>
    </x:call>
    <x:expect label="Math *and* SVG should be present in the item properties"
	      test="exists(//opf:item[contains(@properties, 'math') and contains(@properties, 'svg')])"/>
  </x:scenario>

  <x:scenario label="When generating OPF metadata for a book (with all metadata supplied)">
    <x:call template="opf.metadata">
      <x:param name="metadata.unique-identifier" select="'9780000000000'"/>
      <x:param name="metadata.ibooks-specified-fonts" select="1"/>
      <x:param name="metadata.title" select="'Understanding Computation'"/>
      <x:param name="metadata.language" select="'fr'"/>
      <x:param name="metadata.modified" select="'2013-11-16'"/>
      <x:param name="metadata.rights" select="'Copyrighted by Me'"/>
      <x:param name="metadata.publisher" select="'Prestigious Press, Inc.'"/>
      <x:param name="metadata.subject" select="'Computers / General'"/>
      <x:param name="metadata.date" select="'1999-11-16'"/>
      <x:param name="metadata.description" select="'MARKETING COPY HERE'"/>
      <x:param name="metadata.contributors">
	<meta name="contributor" content="Socrates"/>
      </x:param>
      <x:param name="metadata.creators">
	<meta name="creator" content="Descartes"/>
      </x:param>
      <x:param name="generate.cover.html" select="1"/>
    </x:call>
    <x:expect label="Identifiers should be generated" test="exists(/opf:metadata/dc:identifier[. = '9780000000000']) and 
							    exists(/opf:metadata/opf:meta[@property='dcterms:identifier' and . = '9780000000000'])"/>
    <x:expect label="Title should be generated" test="exists(/opf:metadata/dc:title[. = 'Understanding Computation']) and
						      exists(/opf:metadata/opf:meta[@property='dcterms:title' and . = 'Understanding Computation'])"/>
    <x:expect label="Language should be generated" test="exists(/opf:metadata/dc:language[. = 'fr']) and
							 exists(/opf:metadata/opf:meta[@property = 'dcterms:language' and . = 'fr'])"/>
    <x:expect label="Modified date should be generated" test="exists(/opf:metadata/opf:meta[@property = 'dcterms:modified' and . = '2013-11-16'])"/>
    <x:expect label="Rights information should be generated" test="exists(/opf:metadata/dc:rights[. = 'Copyrighted by Me']) and
								   exists(/opf:metadata/opf:meta[@property = 'dcterms:rightsHolder' and . = 'Copyrighted by Me'])"/>
    <x:expect label="Publisher information should be generated" test="exists(/opf:metadata/dc:publisher[. = 'Prestigious Press, Inc.']) and
								      exists(/opf:metadata/opf:meta[@property = 'dcterms:publisher' and . = 'Prestigious Press, Inc.'])"/>
    <x:expect label="Subject (category) information should be generated" test="exists(/opf:metadata/dc:subject[. = 'Computers / General']) and
									       exists(/opf:metadata/opf:meta[@property = 'dcterms:subject' and . = 'Computers / General'])"/>
    <x:expect label="Publication date information should be generated" test="exists(/opf:metadata/dc:date[. = '1999-11-16']) and
									     exists(/opf:metadata/opf:meta[@property='dcterms:date' and . = '1999-11-16'])"/>
    <x:expect label="Description information should be generated" test="exists(/opf:metadata/dc:description[. = 'MARKETING COPY HERE']) and
									exists(/opf:metadata/opf:meta[@property='dcterms:description' and . = 'MARKETING COPY HERE'])"/>
    <x:expect label="Contributor information should be generated properly for one person" test="count(/opf:metadata/dc:contributor) = 1 and
												exists(/opf:metadata/dc:contributor[. = 'Socrates']) and
												count(/opf:metadata/opf:meta[@property = 'dcterms:contributor']) = 1 and
												exists(/opf:metadata/opf:meta[@property = 'dcterms:contributor' and . = 'Socrates'])"/>
    <x:expect label="Creator information should be generated properly for one author" test="count(/opf:metadata/dc:creator) = 1 and
											    exists(/opf:metadata/dc:creator[. = 'Descartes']) and
											    count(/opf:metadata/opf:meta[@property = 'dcterms:creator']) = 1 and
											    exists(/opf:metadata/opf:meta[@property = 'dcterms:creator' and . = 'Descartes'])"/>
    <x:expect label="Cover metadata should be generated" test="exists(/opf:metadata/opf:meta[@name='cover' and @content='bookcoverimage'])"/>
    <x:expect label="iBooks metadata should be generated if specified" test="exists(/opf:metadata/opf:meta[@property='ibooks:specified-fonts' and . = 'true'])"/>

    <x:scenario label="When generating OPF metadata for book without any metadata supplied or a cover">
      <x:call>
	<x:param name="metadata.unique-identifier"/>
	<x:param name="metadata.ibooks-specified-fonts"/>
	<x:param name="metadata.title"/>
	<x:param name="metadata.language"/>
	<x:param name="metadata.modified"/>
	<x:param name="metadata.rights"/>
	<x:param name="metadata.publisher"/>
	<x:param name="metadata.subject"/>
	<x:param name="metadata.date"/>
	<x:param name="metadata.description"/>
	<x:param name="metadata.contributors"/>
	<x:param name="metadata.creators"/>
	<x:param name="generate.cover.html"/>
      </x:call>
      <x:expect label="Default value should be subbed in for book identifier to ensure EPUB validity" test="exists(/opf:metadata/dc:identifier[contains(., 'randomid')]) and
													    exists(/opf:metadata/opf:meta[@property = 'dcterms:identifier' and contains(., 'randomid')])"/>
      <x:expect label="Default value should be subbed in for book title to ensure EPUB validity" test="exists(/opf:metadata/dc:title[. = 'Untitled Book']) and
												       exists(/opf:metadata/opf:meta[@property = 'dcterms:title' and . = 'Untitled Book'])"/>
      <x:expect label="Default value should be subbed in for book language to ensure EPUB validity" test="exists(/opf:metadata/dc:language[. = 'en']) and
													  exists(/opf:metadata/opf:meta[@property = 'dcterms:language' and . = 'en'])"/>
      <x:expect label="Default value should be subbed in for book modification date to ensure EPUB validity" test="exists(/opf:metadata/opf:meta[@property = 'dcterms:modified' and . = '2014-01-01'])"/>
      <x:expect label="Rights information *should not* be generated" test="not(exists(/opf:metadata/dc:rights)) and 
									   not(exists(/opf:metadata/opf:meta[@property = 'dcterms:rightsHolder']))"/>
      <x:expect label="Publisher information *should not* be generated" test="not(exists(/opf:metadata/dc:publisher)) and
									      not(exists(/opf:metadata/opf:meta[@property = 'dcterms:publisher']))"/>
      <x:expect label="Subject (category) information *should not* be generated" test="not(exists(/opf:metadata/dc:subject)) and
										       not(exists(/opf:metadata/opf:meta[@property = 'dcterms:subject']))"/>
      <x:expect label="Publication date information *should not* be generated" test="not(exists(/opf:metadata/dc:date)) and
										     not(exists(/opf:metadata/opf:meta[@property = 'dcterms:date']))"/>
      <x:expect label="Description information *should not* be generated" test="not(exists(/opf:metadata/dc:description)) and
										not(exists(/opf:metadata/opf:meta[@property = 'dcterms:description']))"/>
      <x:expect label="Contributor information *should not* be generated" test="not(exists(/opf:metadata/dc:contributor)) and
										not(exists(/opf:metadata/opf:meta[@property = 'dcterms:contributor']))"/>
      <x:expect label="Creator information *should not* be generated" test="not(exists(/opf:metadata/dc:creator)) and
									    not(exists(/opf:metadata/opf:meta[@property = 'dcterms:creator']))"/>
      <x:expect label="Cover metadata *should not* be generated if book does not have a cover" test="not(exists(/opf:metadata/opf:meta[@name = 'cover']))"/>
      <x:expect label="iBooks metadata *should not* be generated if *not* specified" test="not(exists(/opf:metadata/opf:meta[@property='ibooks:specified-fonts']))"/>
    </x:scenario>
    <x:scenario label="When generating OPF metadata for a book with two authors specified">
      <x:call>
	<x:param name="metadata.creators">
	  <meta name="creator" content="Descartes"/>
	  <meta name="creator" content="Kant"/>
	</x:param>
      </x:call>
      <x:expect label="Creator information should be generated properly (if present) for two authors" test="count(/opf:metadata/dc:creator) = 1 and 
													    exists(/opf:metadata/dc:creator[. = 'Descartes and Kant']) and
													    count(/opf:metadata/opf:meta[@property = 'dcterms:creator']) = 2 and
													    exists(/opf:metadata/opf:meta[@property = 'dcterms:creator' and . = 'Descartes']) and
													    exists(/opf:metadata/opf:meta[@property = 'dcterms:creator' and . = 'Kant'])"/>
    </x:scenario>    

    <x:scenario label="When generating OPF metadata for a book with more than two authors specified">
      <x:call>
	<x:param name="metadata.creators">
	  <meta name="creator" content="Descartes"/>
	  <meta name="creator" content="Kant"/>
	  <meta name="creator" content="Rawls"/>
	</x:param>
      </x:call>
      <x:expect label="Creator information should be generated properly (if present) for more than two authors" test="count(/opf:metadata/dc:creator) = 1 and
														      exists(/opf:metadata/dc:creator[. = 'Descartes, Kant, and Rawls']) and
														      count(/opf:metadata/opf:meta[@property = 'dcterms:creator']) = 3 and
														      exists(/opf:metadata/opf:meta[@property = 'dcterms:creator' and . = 'Descartes']) and
														      exists(/opf:metadata/opf:meta[@property = 'dcterms:creator' and . = 'Kant']) and 
														      exists(/opf:metadata/opf:meta[@property = 'dcterms:creator' and . = 'Rawls'])"/>
    </x:scenario>

    <x:scenario label="When generating OPF metadata for a book with more than one contributor specified">
      <x:call>
	<x:param name="metadata.contributors">
	  <meta name="contributor" content="Socrates"/>
	  <meta name="contributor" content="Plato"/>
	  <meta name="contributor" content="Aristotle"/>
	</x:param>
      </x:call>
      <x:expect label="Contributor information should be generated properly for multiple people" test="count(/opf:metadata/dc:contributor) = 3 and
												       exists(/opf:metadata/dc:contributor[. = 'Socrates']) and
												       exists(/opf:metadata/dc:contributor[. = 'Plato']) and
												       exists(/opf:metadata/dc:contributor[. = 'Aristotle']) and
												       count(/opf:metadata/opf:meta[@property = 'dcterms:contributor']) = 3 and
												       exists(/opf:metadata/opf:meta[@property = 'dcterms:contributor' and . = 'Socrates']) and
												       exists(/opf:metadata/opf:meta[@property = 'dcterms:contributor' and . = 'Plato']) and
												       exists(/opf:metadata/opf:meta[@property = 'dcterms:contributor' and . = 'Aristotle'])"/>
    </x:scenario>

  </x:scenario>

  <x:pending>
    <x:scenario label="When generate-spine is called">
      <x:call/>
      <x:expect label="There should be a 'toc' attribute on the spine element if NCX TOC generation is enabled"/>
      <x:expect label="There *should not* be a 'toc' attribute on the spine element if NCX TOC generation is not enabled"/>
      <x:expect label="There should be an itemref for the cover if cover.in.spine is enabled and cover HTML is being generated"/>
      <x:expect label="There *should not* be an itemref for the cover if cover.in.spine is disabled"/>
      <x:expect label="There should be an itemref for the root chunk if generate.root.chunk is enabled"/>
      <x:expect label="There *should not* be an itemref for the root chunk if generate.root.chunk is disabled"/>
      <x:expect label="There should be an itemref for every chunk in the book"/>
    </x:scenario>

    <x:scenario label="When generate-guide is called">
      <x:call/>
      <x:expect label="There should be a reference element for the cover if generate.cover.html is enabled"/>
      <x:expect label="There *should not* be a reference element for the cover if generate.cover.html is disabled"/>
      <x:expect label="There should be a reference element to the EPUB Nav doc"/>
      <x:expect label="If there is no EPUB nav doc, stylesheet should throw a warning"/>
      <x:expect label="There should be a reference element for 'start-of-text'"/>
    </x:scenario>

    <x:scenario label="When element is matched in opf.spine.itemref mode">
      <x:call/>
      <x:expect label="An itemref should be generated with an idref that matches the source element id"/>
      <x:scenario label="When Nav doc is matched in opf.spine.itemref mode">
	<x:expect label="An itemref should be generated when nav.in.spine is enabled"/>
	<x:expect label="An itemref *should not* be generated when nav.in.spine is disabled"/>
      </x:scenario>
    </x:scenario>

    <x:scenario label="When element is matched in opf.id mode">
      <x:call/>
      <x:expect label="An id value should be generated that contains the element data-type if it has one"/>
      <x:expect label="An id value should be generated that contains the element local-name if it has no data-type"/>
    </x:scenario>

    <x:scenario label="When a navigation document is matched in opf.manifest properties mode">
      <x:call/>
      <x:expect label="It should return a value of 'nav'"/>
    </x:scenario>
    
    <x:scenario label="When a general element is matched in opf.manifest.properties mode">
      <!-- Ideally do some tests here that play with chunk level -->
      <x:call/>
      <x:expect label="It should return a result containing 'math' if the chunk contains MathML"/>
      <x:expect label="It should return a result containing 'svg' if the chunk contains SVG"/>
      <x:expect label="It should return nothing if the chunk contains neither MathML nor SVG"/>
    </x:scenario>

    <x:scenario label="When has-element-in-chunk is called">
      <!-- Ideally do some tests here that play with chunk level -->
      <x:call/>
      <x:expect label="It should return 1 if an instance of the given element name can be found in the given chunk"/>
      <x:expect label="It should return nothing if an instance of the given element name *cannot* be found in the given chunk"/>
    </x:scenario>

    <x:scenario label="When convert.date.to.utc is called">
      <x:call/>
      <x:expect label="It should return a date in UTC format"/>
    </x:scenario>

    <x:scenario label="When get-extension-from-filename is called">
      <x:call/>
      <x:expect label="It should return the filename extension if the file has one"/>
      <x:expect label="It should return nothing if the filename has no extension"/>
    </x:scenario>

    <x:scenario label="When get-mimetype-from-file-extension is called">
      <x:call/>
      <x:expect label="It should return the proper mimetype for the given file type based on extension"/>
      <x:expect label="It should default to the XHTML mimetype if no mimetype can be found for the file type based on extension"/>
    </x:scenario>
  </x:pending>

</x:description>
